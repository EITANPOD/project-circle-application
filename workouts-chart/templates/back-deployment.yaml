apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.backend.appname }}
  namespace: {{ .Values.global.destination.namespace }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.backend.appname }}
      {{- include "workouts-chart.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Values.backend.appname }}
        {{- include "workouts-chart.labels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "{{ .Values.backend.monitoring.enabled | default true }}"
        prometheus.io/port: "{{ .Values.backend.service.port }}"
        prometheus.io/path: "{{ .Values.backend.monitoring.metricsPath | default \"/metrics\" }}"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: {{ .Values.backend.appname }}
        image: {{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.backend.service.port }}
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: my-db-secret
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-db-secret
              key: DB_PASSWORD
        - name: ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: my-db-secret
              key: ADMIN_TOKEN
        - name: GROQ_API_KEY
          valueFrom:
            secretKeyRef:
              name: my-db-secret
              key: GROQ_API_KEY
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.backend.configmap.name }}
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.backend.configmap.name }}
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.backend.configmap.name }}
              key: DB_NAME
        # Health checks
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.backend.service.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.backend.service.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          limits:
            cpu: {{ .Values.backend.resources.limits.cpu }}
            memory: {{ .Values.backend.resources.limits.memory }}
          requests:
            cpu: {{ .Values.backend.resources.requests.cpu }}
            memory: {{ .Values.backend.resources.requests.memory }}